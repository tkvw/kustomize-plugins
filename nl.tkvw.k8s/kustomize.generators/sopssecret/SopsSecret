if(-Not (Get-Command sops -ErrorAction SilentlyContinue)){
    Write-Output ""
    Write-Output "Error: ** Could not decode Sops encrypted secret **"    
    Write-Output "Sops is not found on the path, please install sops correctly (https://github.com/mozilla/sops)"
    exit 1
}

if(-Not (Get-Command ConvertFrom-Yaml -ErrorAction SilentlyContinue)){
    Write-Output ""
    Write-Output "Error: ** Could not decode Sops encrypted secret **"    
    Write-Output "ConvertFrom-Yaml Powershell command not found, please install powershell-yaml `"Install-Module -Name powershell-yaml`""
    exit 1
}
# Ignore-mac is needed, because kustomize writes the *parsed* yaml back to a temp file
# This temp file does not have a quaranteed order
$decryptedContent = $(sops --ignore-mac --input-type yaml --output-type yaml -d "$($args[0])") | Out-String
$decryptedData = (ConvertFrom-Yaml -Yaml $decryptedContent)

# Strip off encrypted suffix from all keys
$encryptedSuffix = $(Get-Content $($args[0]) -Raw | ConvertFrom-Yaml | Select-Object -ExpandProperty sops).encrypted_suffix
if($null -ne $encryptedSuffix){
    function StripSuffix($data){
        $result = @{}
        foreach ($key in $data.Keys){
            $resultKey = $keym
            if ($resultKey.EndsWith($encryptedSuffix)){
                $resultKey = $resultKey.Substring(0,$resultKey.Length - $encryptedSuffix.Length)
            }

            $keyValue = $data[$key]
            if("Hashtable" -eq ($keyValue).GetType().Name){
                $result[$resultKey] = StripSuffix($keyValue)
            }
            else{
                $result[$resultKey] = $keyValue
            }
        }
        return $result
    }
    $decryptedData = StripSuffix($decryptedData)
}
# Set the correct kubernetes types
$decryptedData["apiVersion"] = "v1"
$decryptedData["kind"] = "Secret"

ConvertTo-Yaml $decryptedData | Write-Output
